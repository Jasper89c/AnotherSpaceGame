// <auto-generated />
using System;
using AnotherSpaceGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnotherSpaceGame.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527202148_C+EResearch")]
    partial class CEResearch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnotherSpaceGame.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BattlesLost")
                        .HasColumnType("int");

                    b.Property<int>("BattlesWon")
                        .HasColumnType("int");

                    b.Property<int>("ColoniesExplored")
                        .HasColumnType("int");

                    b.Property<int>("ColoniesLost")
                        .HasColumnType("int");

                    b.Property<int>("ColoniesWon")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("EmpireAge")
                        .HasColumnType("float");

                    b.Property<int>("Fraction")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PlanetsPlundered")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayingSince")
                        .HasColumnType("datetime2");

                    b.Property<int>("PowerRating")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalColonies")
                        .HasColumnType("int");

                    b.Property<int>("TotalPlanets")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Artifacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactName")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactType")
                        .HasColumnType("int");

                    b.Property<int>("MaxTotal")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Commodities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Composite")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerGoods")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Ore")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterial")
                        .HasColumnType("int");

                    b.Property<int>("RedCrystal")
                        .HasColumnType("int");

                    b.Property<int>("Rutile")
                        .HasColumnType("int");

                    b.Property<int>("StrafezOrganism")
                        .HasColumnType("int");

                    b.Property<int>("TerranMetal")
                        .HasColumnType("int");

                    b.Property<int>("WhiteCrystal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.CyrilClassResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CyrilCorvette")
                        .HasColumnType("bit");

                    b.Property<int>("CyrilCorvetteTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("CyrilCruiser")
                        .HasColumnType("bit");

                    b.Property<int>("CyrilCruiserTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("CyrilDestroyer")
                        .HasColumnType("bit");

                    b.Property<int>("CyrilDestroyerTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("CyrilFrigate")
                        .HasColumnType("bit");

                    b.Property<int>("CyrilFrigateTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("LargeCyrilHull")
                        .HasColumnType("bit");

                    b.Property<int>("LargeCyrilHullTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("MediumCyrilHull")
                        .HasColumnType("bit");

                    b.Property<int>("MediumCyrilHullTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("SmallCyrilHull")
                        .HasColumnType("bit");

                    b.Property<int>("SmallCyrilHullTurnsRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("CyrilClassResearches");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.EClassResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EClassDestroyer")
                        .HasColumnType("bit");

                    b.Property<int>("EClassDestroyerTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("EClassFighter")
                        .HasColumnType("bit");

                    b.Property<int>("EClassFighterTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("EClassFrigate")
                        .HasColumnType("bit");

                    b.Property<int>("EClassFrigateTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("ExaHertzClassRailgun")
                        .HasColumnType("bit");

                    b.Property<int>("ExaHertzClassRailgunTurnsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("ZettaHertzClassRailgun")
                        .HasColumnType("bit");

                    b.Property<int>("ZettaHertzClassRailgunTurnsRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("EClassResearches");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Fleet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPowerRating")
                        .HasColumnType("int");

                    b.Property<int>("TotalShips")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Infrastructer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Agriculture")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Commercial")
                        .HasColumnType("int");

                    b.Property<int>("Housing")
                        .HasColumnType("int");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<int>("Mining")
                        .HasColumnType("int");

                    b.Property<int>("TotalLevels")
                        .HasColumnType("int");

                    b.Property<int>("TurnsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("TurnsRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Infrastructers");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Planets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Agriculture")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtifactModifier")
                        .HasColumnType("int");

                    b.Property<int>("AvailableLabour")
                        .HasColumnType("int");

                    b.Property<int>("AvailableOre")
                        .HasColumnType("int");

                    b.Property<int>("Commercial")
                        .HasColumnType("int");

                    b.Property<int>("CurrentPopulation")
                        .HasColumnType("int");

                    b.Property<int>("FoodRequired")
                        .HasColumnType("int");

                    b.Property<int>("GoodsRequired")
                        .HasColumnType("int");

                    b.Property<int>("Housing")
                        .HasColumnType("int");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<int>("LandAvailable")
                        .HasColumnType("int");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<int>("MaxPopulation")
                        .HasColumnType("int");

                    b.Property<int>("MineralProduced")
                        .HasColumnType("int");

                    b.Property<int>("Mining")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<int>("TotalLand")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Turns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentTurns")
                        .HasColumnType("int");

                    b.Property<int>("MaxTurns")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Artifacts", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Artifacts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Commodities", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Commodities")
                        .HasForeignKey("AnotherSpaceGame.Models.Commodities", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.CyrilClassResearch", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("CyrilClassResearch")
                        .HasForeignKey("AnotherSpaceGame.Models.CyrilClassResearch", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.EClassResearch", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("EClassResearch")
                        .HasForeignKey("AnotherSpaceGame.Models.EClassResearch", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Fleet", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Fleets")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Infrastructer", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Infrastructer")
                        .HasForeignKey("AnotherSpaceGame.Models.Infrastructer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Planets", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Planets")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.Turns", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Turns")
                        .HasForeignKey("AnotherSpaceGame.Models.Turns", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AnotherSpaceGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnotherSpaceGame.Models.ApplicationUser", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Commodities")
                        .IsRequired();

                    b.Navigation("CyrilClassResearch")
                        .IsRequired();

                    b.Navigation("EClassResearch")
                        .IsRequired();

                    b.Navigation("Fleets");

                    b.Navigation("Infrastructer")
                        .IsRequired();

                    b.Navigation("Planets");

                    b.Navigation("Turns")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
